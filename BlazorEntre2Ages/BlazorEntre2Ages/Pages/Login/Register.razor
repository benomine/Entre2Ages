@page "/signup"
@using BlazorEntre2Ages.Models
@using BlazorEntre2Ages.Services
@using BlazorEntre2Ages.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject IUserService UserService

    <EditForm Model="@_user" OnValidSubmit="@RegisterUser">
        <div>
            <br /><br /><br /><br /><br />
        </div>
        <div>
            <h3 style="font-weight:bold; color:purple">Entre2Ages Register</h3>
        </div>
        <div>
            <br />
        </div>
        <div class="col-12 row">
            <input class="form-control col-12" @bind="_user.Email" placeholder="email address" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="password" class="form-control col-12" @bind="_user.Password" placeholder="password" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="password" class="form-control col-12" @bind="_user.ConfirmPassword" placeholder="confirm password" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-12"></span>
            <input type="submit" class="form-control col-6 btn btn-primary" value="Sign up" />
            <a href="/" class="col-6">Already an user?</a>
        </div>
        <br />
        <div class="col-12 row" style="text-align:left; font-weight:bold">
            <span class="col-12">@LoginMesssage</span>
        </div>
    </EditForm>

@code {

    private User _user;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        _user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> RegisterUser()
    {
        var returnedUser = await UserService.RegisterUserAsync(_user);

        if (returnedUser.Email != null)
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            LoginMesssage = "Invalid username or password";
        }

        return await Task.FromResult(true);
    }

}